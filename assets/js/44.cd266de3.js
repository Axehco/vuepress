(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{454:function(t,s,a){t.exports=a.p+"assets/img/0024_001.7e890da0.jpg"},455:function(t,s,a){t.exports=a.p+"assets/img/0024_002.66bb1397.png"},865:function(t,s,a){"use strict";a.r(s);var e=a(25),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_24-两两交换链表中的节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_24-两两交换链表中的节点"}},[t._v("#")]),t._v(" 24. 两两交换链表中的节点")]),t._v(" "),e("Valine"),t._v(" "),e("h2",{attrs:{id:"题目描述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[t._v("#")]),t._v(" 题目描述")]),t._v(" "),e("p",[t._v("题目传送门："),e("a",{attrs:{href:"https://leetcode-cn.com/problems/swap-nodes-in-pairs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("24. 两两交换链表中的节点"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。")]),t._v(" "),e("p",[e("strong",[t._v("你不能只是单纯的改变节点内部的值")]),t._v("，而是需要实际的进行节点交换。")]),t._v(" "),e("p",[e("strong",[t._v("示例 1：")])]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{staticClass:"zoom-custom-imgs",attrs:{src:a(454),width:"300px"}})]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("输入：head = [1,2,3,4]\n输出：[2,1,4,3]\n")])])]),e("p",[e("strong",[t._v("示例 2：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("输入：head = []\n输出：[]\n")])])]),e("p",[e("strong",[t._v("示例 3：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("输入：head = [1]\n输出：[1]\n")])])]),e("p",[e("strong",[t._v("提示：")])]),t._v(" "),e("ul",[e("li",[t._v("链表中节点的数目在范围 "),e("code",[t._v("[0, 100]")]),t._v(" 内")]),t._v(" "),e("li",[e("code",[t._v("0 <= Node.val <= 100")])])]),t._v(" "),e("p",[t._v("**进阶：**你能在不修改链表节点值的情况下解决这个问题吗?（也就是说，仅修改节点本身。）")]),t._v(" "),e("h2",{attrs:{id:"题解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#题解"}},[t._v("#")]),t._v(" 题解")]),t._v(" "),e("h3",{attrs:{id:"迭代思路"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#迭代思路"}},[t._v("#")]),t._v(" 迭代思路")]),t._v(" "),e("p",[t._v("创建一个虚拟头结点"),e("code",[t._v("virhead")]),t._v("指向头结点"),e("code",[t._v("head")]),t._v("，定义指针"),e("code",[t._v("cur")]),t._v("指向当前的虚拟头结点")]),t._v(" "),e("p",[t._v("将"),e("code",[t._v("cur")]),t._v("后面的两个结点暂时存起来，分别为"),e("code",[t._v("temp1")]),t._v("和"),e("code",[t._v("temp2")]),t._v("，如下图所示改变指针的指向即可。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{staticClass:"zoom-custom-imgs",attrs:{src:a(455)}})]),t._v(" "),e("h3",{attrs:{id:"代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[t._v("#")]),t._v(" 代码")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    ListNode"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("swapPairs")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ListNode"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" head"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个虚拟头结点并指向head")]),t._v("\n        ListNode"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" virhead "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ListNode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        virhead"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        ListNode"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" cur "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" virhead"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cur后面有两颗指针同时存在时才交换位置")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" cur"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            ListNode"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" temp1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cur"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            ListNode"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" temp2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cur"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            temp1"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp2"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            temp2"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            cur"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            cur "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cur"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 向后移动两位，进行下一轮交换")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" virhead"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 虚拟头结点不需要")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])],1)}),[],!1,null,null,null);s.default=n.exports}}]);