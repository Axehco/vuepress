(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{521:function(t,s,a){t.exports=a.p+"assets/img/0148_001.ef6fb1f3.jpg"},522:function(t,s,a){t.exports=a.p+"assets/img/0148_002.faf28c52.jpg"},934:function(t,s,a){"use strict";a.r(s);var e=a(25),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_148-排序链表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_148-排序链表"}},[t._v("#")]),t._v(" 148. 排序链表")]),t._v(" "),e("Valine"),t._v(" "),e("h2",{attrs:{id:"题目描述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[t._v("#")]),t._v(" 题目描述")]),t._v(" "),e("p",[t._v("题目传送门："),e("a",{attrs:{href:"https://leetcode-cn.com/problems/sort-list/",target:"_blank",rel:"noopener noreferrer"}},[t._v("148. 排序链表"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("给你链表的头结点 "),e("code",[t._v("head")]),t._v(" ，请将其按 "),e("strong",[t._v("升序")]),t._v(" 排列并返回 "),e("strong",[t._v("排序后的链表")]),t._v(" 。")]),t._v(" "),e("p",[e("strong",[t._v("示例 1：")])]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{staticClass:"zoom-custom-imgs",attrs:{src:a(521),width:"400px"}})]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("输入：head = [4,2,1,3]\n输出：[1,2,3,4]\n")])])]),e("p",[e("strong",[t._v("示例 2：")])]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{staticClass:"zoom-custom-imgs",attrs:{src:a(522),width:"400px"}})]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("输入：head = [-1,5,3,4,0]\n输出：[-1,0,3,4,5]\n")])])]),e("p",[e("strong",[t._v("示例 3：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("输入：head = []\n输出：[]\n")])])]),e("p",[e("strong",[t._v("提示：")])]),t._v(" "),e("ul",[e("li",[t._v("链表中节点的数目在范围 "),e("code",[t._v("[0, 5 * 10^4]")]),t._v(" 内")]),t._v(" "),e("li",[e("code",[t._v("-10^5 <= Node.val <= 10^5")])])]),t._v(" "),e("h2",{attrs:{id:"题解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#题解"}},[t._v("#")]),t._v(" 题解")]),t._v(" "),e("p",[t._v("时间复杂度为"),e("code",[t._v("O(nlogn)")]),t._v("的排序算法包括归并排序、堆排序和快速排序（快速排序的最差时间复杂度是"),e("code",[t._v("O(n^2)")]),t._v("），其中最适合链表的排序算法是归并排序。")]),t._v(" "),e("p",[t._v("归并排序基于分治思想。最容易想到的实现方式是自顶向下的递归实现，考虑到递归调用的栈空间，自顶向下归并排序的空间复杂度是"),e("code",[t._v("O(logn)")]),t._v("，如果要达到"),e("code",[t._v("O(1)")]),t._v("的空间复杂度，则需要使用自底向上的实现方式（待实现。。。）。")]),t._v(" "),e("h3",{attrs:{id:"自顶向下归并排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自顶向下归并排序"}},[t._v("#")]),t._v(" 自顶向下归并排序")]),t._v(" "),e("p",[e("strong",[t._v("分割：")]),t._v(" 找到当前链表"),e("code",[t._v("中点")]),t._v("，并从中间将链表断开。")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("使用 "),e("code",[t._v("fast,slow")]),t._v(" 快慢双指针法，找到中间节点。")])]),t._v(" "),e("li",[e("p",[t._v("找到中点 "),e("code",[t._v("slow")]),t._v(" 后，执行 "),e("code",[t._v("slow.next = nullptr")]),t._v(" 将链表切断。")])]),t._v(" "),e("li",[e("p",[t._v("递归分割当前链表左端点 "),e("code",[t._v("head")]),t._v(" 和中心节点 "),e("code",[t._v("slow")]),t._v(" 的下一个节点 "),e("code",[t._v("headTmp")]),t._v(" ，注意链表是从 "),e("code",[t._v("slow")]),t._v(" 切断。")])])]),t._v(" "),e("p",[e("strong",[t._v("合并：")]),t._v(" 将两个排序链表合并，转化为一个排序链表。")]),t._v(" "),e("ol",[e("li",[t._v("双指针法合并，建立辅助虚拟头节点 "),e("code",[t._v("dummyHead")]),t._v(" 作为头部。")]),t._v(" "),e("li",[t._v("设置两指针 "),e("code",[t._v("left")]),t._v(", "),e("code",[t._v("right")]),t._v(" 分别指向两链表头部，比较两指针处节点值大小，由小到大加入合并链表头部，指针交替前进，直至添加完两个链表。")]),t._v(" "),e("li",[t._v("返回虚拟头结点"),e("code",[t._v("dummyHead")]),t._v("的下个节点 "),e("code",[t._v("h.next")]),t._v("。")])]),t._v(" "),e("p",[e("strong",[t._v("C++代码实现：")])]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    ListNode"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sortList")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ListNode"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" head"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nullptr")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" head"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nullptr")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" head"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        ListNode"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" slow "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        ListNode"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" fast "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fast "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nullptr")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" fast"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nullptr")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            slow "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" slow"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            fast "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fast"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        ListNode"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" headTmp "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" slow"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        slow"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nullptr")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        ListNode"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" left "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sortList")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        ListNode "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" right"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sortList")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("headTmp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        ListNode"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" dummyHead "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ListNode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        ListNode"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" res "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dummyHead"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nullptr")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" right "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nullptr")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("val "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" right"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("val"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                dummyHead"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" left"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                left "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" left"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                dummyHead"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" right"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                right "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" right"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            dummyHead "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dummyHead"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        dummyHead"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" left "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nullptr")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" left "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" right"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])],1)}),[],!1,null,null,null);s.default=r.exports}}]);