(window.webpackJsonp=window.webpackJsonp||[]).push([[275],{1094:function(a,t,s){"use strict";s.r(t);var n=s(25),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"java-面向对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-面向对象"}},[a._v("#")]),a._v(" Java 面向对象")]),a._v(" "),s("Valine"),a._v(" "),s("h2",{attrs:{id:"_1-类与对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-类与对象"}},[a._v("#")]),a._v(" 1. 类与对象")]),a._v(" "),s("h3",{attrs:{id:"_1-1-类之间的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-类之间的关系"}},[a._v("#")]),a._v(" 1.1 类之间的关系")]),a._v(" "),s("ul",[s("li",[a._v("依赖 "),s("code",[a._v("users-a")]),a._v(" "),s("ul",[s("li",[a._v("如果一个类的方法使用或操纵另一个类的对象，就说一个类依赖于另一个类。")])])]),a._v(" "),s("li",[a._v("聚合 "),s("code",[a._v("has-a")]),a._v(" "),s("ul",[s("li",[a._v("包含关系意味着类A的对象包含类B的对象。")])])]),a._v(" "),s("li",[a._v("继承 "),s("code",[a._v("is-a")]),a._v(" "),s("ul",[s("li",[a._v("类A拓展类B，而类A不但包含从类B继承的方法，还会有一些额外的功能。")])])])]),a._v(" "),s("p",[s("strong",[a._v("应尽可能地将相互依赖的类减至最少。")])]),a._v(" "),s("h3",{attrs:{id:"_1-2-对象与对象变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-对象与对象变量"}},[a._v("#")]),a._v(" 1.2 对象与对象变量")]),a._v(" "),s("p",[a._v("在对象与对象变量之间存在着一个重要的区别。例如，如下语句：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" deadline"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("定义了一个对象变量"),s("code",[a._v("deadline")]),a._v("，它可以引用"),s("code",[a._v("Date")]),a._v("类型的对象。一定要认清：变量"),s("code",[a._v("deadline")]),a._v("不是一个对象，而且实际上也没有引用任何对象。此时还不能使用在这个变量上的任何"),s("code",[a._v("Date")]),a._v("方法。")]),a._v(" "),s("p",[a._v("在Java中，任何对象变量的值都是对存储在另外一个地方的某个对象的引用。"),s("code",[a._v("new")]),a._v("操作符的返回值也是一个引用。下面的语句：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" deadline "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("有两个部分。表达式"),s("code",[a._v("new Date()")]),a._v("构造了一个"),s("code",[a._v("Date")]),a._v("类型的对象，它的值是对新创建的对象的一个引用。这个引用存储在变量"),s("code",[a._v("deadline")]),a._v("中。")]),a._v(" "),s("p",[a._v("可以显示的将对象变量设置为"),s("code",[a._v("null")]),a._v("，指示这个对象变量目前没有引用任何对象。")]),a._v(" "),s("h3",{attrs:{id:"_1-3-用户自定义类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-用户自定义类"}},[a._v("#")]),a._v(" 1.3 用户自定义类")]),a._v(" "),s("p",[a._v("在一个源文件中，只能有一个公共类并且公共类与文件夹同名，但可以有任意数目的非公共类。一个文件中有几个类就会被编译成几个"),s("code",[a._v(".class")]),a._v("文件。")]),a._v(" "),s("h3",{attrs:{id:"_1-4-构造器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-构造器"}},[a._v("#")]),a._v(" 1.4 构造器")]),a._v(" "),s("ul",[s("li",[a._v("构造器与类同名")]),a._v(" "),s("li",[a._v("每个类可以有一个以上的构造器")]),a._v(" "),s("li",[a._v("构造器可以有0个、1个或多个参数")]),a._v(" "),s("li",[a._v("构造器没有返回值")]),a._v(" "),s("li",[a._v("构造器总是伴随着new操作符一起使用")])]),a._v(" "),s("p",[a._v("所有的Java对象都是在"),s("strong",[a._v("堆")]),a._v("中构造的，构造器总是结合"),s("strong",[a._v("new操作符")]),a._v("一起使用，不要在构造器中定义与实例字段同名的局部变量。")]),a._v(" "),s("p",[a._v("如果需要返回一个可变对象的引用，首先应该对它进行克隆。对象克隆是指存放在另一个新位置上的对象副本。如果要修改"),s("code",[a._v("Employee")]),a._v("类中的"),s("code",[a._v("HireDay")]),a._v("方法，下面是修改后的代码：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Employee")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getHireDay")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" hireDay"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("clone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("这里有一个经验，如果需要返回一个可变数据字段的副本，就应该使用"),s("code",[a._v("clone")]),a._v("。")]),a._v(" "),s("h3",{attrs:{id:"_1-5-final关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-final关键字"}},[a._v("#")]),a._v(" 1.5 final关键字")]),a._v(" "),s("ul",[s("li",[a._v("final用于修饰基本数据类型，表示数据不可再改变。")]),a._v(" "),s("li",[a._v("final用于修饰引用数据类型，变量中的对象引用不会再指向其他对象。")])]),a._v(" "),s("p",[a._v("实例字段被定义为"),s("code",[a._v("final")]),a._v("时必须在构造对象时初始化。")]),a._v(" "),s("h3",{attrs:{id:"_1-6-静态字段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-静态字段"}},[a._v("#")]),a._v(" 1.6 静态字段")]),a._v(" "),s("p",[a._v("如果一个字段被定义为"),s("code",[a._v("static")]),a._v("，则只属于"),s("code",[a._v("类")]),a._v("所有。对于非静态的实例字段，每个对象都有一个自己的副本。")]),a._v(" "),s("h3",{attrs:{id:"_1-7-静态域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-静态域"}},[a._v("#")]),a._v(" 1.7 静态域")]),a._v(" "),s("p",[a._v("如果将域定义为 "),s("code",[a._v("static")]),a._v(", 每个类中只有一个这样的域。而每一个对象对于所有的实例域却都有自己的一份拷贝。即被定义为"),s("code",[a._v("static")]),a._v("，便属于类，而不属于对象，随类的加载而被生成。")]),a._v(" "),s("p",[a._v("静态方法：静态方法是一种不能向对象实施操作的方法。静态方法中没有隐式参数，也就不能用this来得到隐式参数，而在一个非静态方法中，this指代其隐式参数，一般指调用的对象。")]),a._v(" "),s("h3",{attrs:{id:"_1-8-重载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-重载"}},[a._v("#")]),a._v(" 1.8 重载")]),a._v(" "),s("p",[a._v("如果多个方法（比如，StringBuilder构造器方法）有相同的名字、不同的参数，便产生了重载。编译器必须挑选出具体执行哪个方法，它通过用各个方法给出的参数类型与特定方法调用所使用的值类型进行匹配来挑选出相应的方法。")]),a._v(" "),s("p",[a._v("在Java中允许重载任何方法，而不只是构造器方法。")]),a._v(" "),s("p",[a._v("方法重载必须是"),s("strong",[a._v("参数类型或者参数数量不同")]),a._v("，返回值类型不作数。")]),a._v(" "),s("p",[a._v("JVM在重载方法时，选择合适的目标方法的顺序如下：")]),a._v(" "),s("ol",[s("li",[a._v("精准匹配")]),a._v(" "),s("li",[a._v("如果是基本数据类型，自动转换成更大的表示范围的基本类型")]),a._v(" "),s("li",[a._v("通过自动拆箱与装箱")]),a._v(" "),s("li",[a._v("通过子类向上转型继承路线依次匹配")]),a._v(" "),s("li",[a._v("通过可变参数匹配")])]),a._v(" "),s("h3",{attrs:{id:"_1-9-构造器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-构造器"}},[a._v("#")]),a._v(" 1.9 构造器")]),a._v(" "),s("p",[a._v("很多类都包含一个无参数的构造函数，对象由无参数构造函数创建时，其状态会设置为适当的默认值。如果在编写一个类时没有编写构造器，那么系统就会提供一个无参数构造器。这个构造器将所有的实例域设置为默认值。")]),a._v(" "),s("ul",[s("li",[a._v("实例域中的数值型数据默认值设置为"),s("code",[a._v("0")])]),a._v(" "),s("li",[a._v("布尔型数据默认值设置为"),s("code",[a._v("false")]),a._v("、")]),a._v(" "),s("li",[a._v("所有对象变量默认值将设置为"),s("code",[a._v("null")]),a._v("。")])]),a._v(" "),s("p",[a._v("Java有自动的垃圾回收器，不需要人工回收内存，所以Java不 支持析构器。")]),a._v(" "),s("p",[s("strong",[a._v("注意：字段与局部变量的一个重要区别就是：方法中的局部变量必须明确地初始化。但是在类中，没有初始化的字段，将会自动初始化为默认值。")])]),a._v(" "),s("p",[s("strong",[a._v("调用构造器的具体处理步骤：")])]),a._v(" "),s("ol",[s("li",[s("p",[a._v("如果构造器的第一行调用了另一个构造器，则基于所提供的参数执行第二个构造器。")])]),a._v(" "),s("li",[s("p",[a._v("否则，")]),a._v(" "),s("p",[a._v("​\ta) 所有数据字段初始化为其默认值（"),s("code",[a._v("0")]),a._v("，"),s("code",[a._v("false")]),a._v("，"),s("code",[a._v("null")]),a._v("）。")]),a._v(" "),s("p",[a._v("​    b) 按照在类声明中出现的顺序，执行所有"),s("strong",[a._v("字段初始化方法")]),a._v("和"),s("strong",[a._v("初始化块")]),a._v("。")])]),a._v(" "),s("li",[s("p",[a._v("执行构造器主体代码")])])]),a._v(" "),s("h3",{attrs:{id:"_1-10-初始化块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-初始化块"}},[a._v("#")]),a._v(" 1.10 初始化块")]),a._v(" "),s("p",[a._v("静态代码块和普通代码块的区别，静态代码块在类最开始被执行，可以理解为在内存中开辟了一块固定的空间来存储，位置上不会改变，普通代码块每生成一个对象就执行一次。")]),a._v(" "),s("h3",{attrs:{id:"_1-11-方法参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-11-方法参数"}},[a._v("#")]),a._v(" 1.11 方法参数")]),a._v(" "),s("p",[s("strong",[a._v("Java总是采用按值调用（传递）。也就是说，方法得到的是所有参数值的一个副本。不要误认为Java对象采用的是按引用调用。")])]),a._v(" "),s("p",[a._v("一个方法不可能修改基本数据类型，而对象引用作为参数就不同了。")]),a._v(" "),s("p",[a._v("Java方法参数能做什么不能做什么：")]),a._v(" "),s("ul",[s("li",[a._v("方法不能修改基本数据类型的参数（即"),s("strong",[a._v("数值型或布尔型")]),a._v("）")]),a._v(" "),s("li",[a._v("方法可以改变对象参数的"),s("strong",[a._v("状态")])]),a._v(" "),s("li",[a._v("方法不能让一个对象参数引用一个新的对象。")])]),a._v(" "),s("h3",{attrs:{id:"_1-12-包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-12-包"}},[a._v("#")]),a._v(" 1.12 包")]),a._v(" "),s("p",[a._v("Java允许使用包（package）将类组织起来。借助于包可以方便地组织自己的代 码，并将自己的代码与别人提供的代码库分开管理。使用包的主要原因是确保类名的唯一性。")]),a._v(" "),s("p",[a._v("可以使用"),s("code",[a._v("import")]),a._v("关键字引入包。")]),a._v(" "),s("p",[a._v("从编译器的角度来看，嵌套的包之间没有任何关系。例如，"),s("code",[a._v("java.util包")]),a._v("与"),s("code",[a._v("java.util.jar包")]),a._v("毫无关系。每一个都拥有独立的类集合。")]),a._v(" "),s("p",[s("strong",[a._v("包作用域")])]),a._v(" "),s("p",[a._v("标记为"),s("code",[a._v("public")]),a._v("的部分可以被任意的类使用；标记为"),s("code",[a._v("private")]),a._v("的部分只能被定义它们的类使用。如果没有指定"),s("code",[a._v("public")]),a._v("或"),s("code",[a._v("private")]),a._v("，这个部分（类、方法或变量）可以被同一个包中的所有方法访问。")]),a._v(" "),s("h3",{attrs:{id:"_1-13-类的设计技巧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-13-类的设计技巧"}},[a._v("#")]),a._v(" 1.13 类的设计技巧")]),a._v(" "),s("ol",[s("li",[a._v("一定要保证数据私有 。这是最重要的；绝对不要破坏封装性。有时候，需要编写一个访问器方法或更改器方法，但是最好还是保持实例域的私有性。很多惨痛的经验告诉我们，数据的表示形式很可能会改变，但它们的使用方式却不会经常发生变化。当数据保持私有时，它们的表示形式的变化不会对类的使用者产生影响，即使出现 bug 也易于检测。")]),a._v(" "),s("li",[a._v("一定要对数据初始化， Java 不对局部变量进行初始化， 但是会对对象的实例域进行初始化。最好不要依赖于系统的默认值，而是应该显式地初始化所有的数据，具体的初始化方式可以是提供默认值，也可以是在所有构造器中设置默认值。")]),a._v(" "),s("li",[a._v("不要在类中使用过多的基本类型 。就是说，用其他的类代替多个相关的基本类型的使用。这样会使类更加易于理解且易于修改。")]),a._v(" "),s("li",[a._v("不是所有的域都需要独立的域访问器和域更改器。")]),a._v(" "),s("li",[a._v("将职责过多的类进行分解。")]),a._v(" "),s("li",[a._v("类名和方法名要能够体现它们的职责。")]),a._v(" "),s("li",[a._v("优先使用不可变的类 。")])]),a._v(" "),s("h2",{attrs:{id:"_2-继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-继承"}},[a._v("#")]),a._v(" 2. 继承")]),a._v(" "),s("h3",{attrs:{id:"_2-1-基本思想"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-基本思想"}},[a._v("#")]),a._v(" 2.1 基本思想")]),a._v(" "),s("p",[a._v("继承的基本思想是，可以基于已有的类创建新的类。继承已经存在的类就是复用这些类的方法，而且可以增加一些新的方法和字段，使新的类能够适应新的情况。")]),a._v(" "),s("p",[a._v("Java中所有的继承都是公共继承。")]),a._v(" "),s("h3",{attrs:{id:"_2-2-子类构造器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-子类构造器"}},[a._v("#")]),a._v(" 2.2 子类构造器")]),a._v(" "),s("p",[a._v("使用"),s("code",[a._v("super")]),a._v("调用父类构造器的语句必须是子类构造器的第一条语句。")]),a._v(" "),s("p",[a._v("如果子类的构造器没有显式地调用超类的构造器，则将自动地调用超类默认（没有参数）的构造器。如果超类没有不带参数的构造器，并且在子类的构造器中又没有显式地调用超类的其他构造器，则Java编译器将报告错误。")]),a._v(" "),s("p",[s("strong",[a._v("this和super")])]),a._v(" "),s("p",[a._v("关键字this有两个用途：")]),a._v(" "),s("ul",[s("li",[a._v("一是引用隐式参数")]),a._v(" "),s("li",[a._v("二是调用该类其他的构造器。")])]),a._v(" "),s("p",[a._v("super关键字也有两个用途：")]),a._v(" "),s("ul",[s("li",[a._v("一是调用超类的方法")]),a._v(" "),s("li",[a._v("二是调用超类的构造器。")])]),a._v(" "),s("h3",{attrs:{id:"_2-3-多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-多态"}},[a._v("#")]),a._v(" 2.3 多态")]),a._v(" "),s("p",[a._v("一个对象变量可以指示多种实际类型的现象被称为多态（polymorphism）。在运行时能够自动地选择调用哪个方法的现象称为动态绑定（dynamic binding）。")]),a._v(" "),s("p",[a._v("在覆盖一个方法的时候，子类方法不能低于超类方法的可见性。特别是，如果超类方法是public，子类方法一定要声明为public。易错误：在声明子类方法的时候，遗漏了public修饰符。")]),a._v(" "),s("p",[s("code",[a._v("is-a")]),a._v("规则的另一种表述是"),s("strong",[a._v("替换原则")]),a._v("。它指出程序中出现超类对象的任何地方都可以使用子类对象替换。")]),a._v(" "),s("p",[a._v("在Java中，对象变量是多态的。如一个"),s("code",[a._v("Employee")]),a._v("类型的变量既可以引用一个"),s("code",[a._v("Employee")]),a._v("类型的对象，也可以引用"),s("code",[a._v("Employee")]),a._v("类的任何一个子类的对象。")]),a._v(" "),s("h3",{attrs:{id:"_2-4-阻止继承final类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-阻止继承final类"}},[a._v("#")]),a._v(" 2.4 阻止继承final类")]),a._v(" "),s("p",[a._v("不允许拓展的类称为final类。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Executive")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Manager")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("如果将一个类声明为final，只有其中的方法自动地成为final，而不包括域。"),s("strong",[a._v("方法前使用final")]),a._v("，子类就不能覆盖这个方法。")]),a._v(" "),s("h3",{attrs:{id:"_2-5-强制类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-强制类型转换"}},[a._v("#")]),a._v(" 2.5 强制类型转换")]),a._v(" "),s("ul",[s("li",[a._v("只能在继承层次内进行强制类型转换。")]),a._v(" "),s("li",[a._v("在将超类转换为子类之前，应该使用"),s("code",[a._v("instanceof")]),a._v("进行检查。")])]),a._v(" "),s("h3",{attrs:{id:"_2-6-抽象类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-抽象类"}},[a._v("#")]),a._v(" 2.6 抽象类")]),a._v(" "),s("p",[a._v("从某种角度看，如果一个类将它作为派生其他类的基类，而不是用来构造特定的实例时，说明这个类需要是一个抽象类。")]),a._v(" "),s("p",[a._v("为了提高程序的清晰度，包含一个或多个抽象方法的类本身必须被声明为抽象的。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("abstract")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Person")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("abstract")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getDescription")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("包含一个或多个抽象方法的类本身必须被声明为抽象的。除了抽象方法之外，抽象类还可以包含具体数据和具体方法。")]),a._v(" "),s("p",[a._v("**如果一个类继承抽象类，要么必须实现抽象类中所有的抽象方法，要么此类也被定义为一个抽象类。**也就是说扩展抽象类可以有两种选择。一种是在子类中保留抽象类中的部分或者所以抽象方法仍未定义，这样就必须将子类也标记为抽象类；另一种做法就是定义全部方法，这样一来，子类就不是抽象的了。")]),a._v(" "),s("p",[a._v("抽象类不能被实例化。也就是说，如果将一个类声明为"),s("code",[a._v("abstract")]),a._v("，就不能创建这个类的对象。")]),a._v(" "),s("h3",{attrs:{id:"_2-7-受保护访问"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-受保护访问"}},[a._v("#")]),a._v(" 2.7 受保护访问")]),a._v(" "),s("p",[a._v("一般地，类中的域标记为private，而方法标记为public。子类也不能访问超类的私有字段。在有些时候，可能希望限制超类中的某个方法只允许子类访问，此时这些类的方法或字段就应该申明为"),s("code",[a._v("protected")]),a._v("。")]),a._v(" "),s("p",[a._v("Java中的受保护部分对"),s("strong",[a._v("所有子类")]),a._v("及"),s("strong",[a._v("同一个包中的所有其他类")]),a._v("都可见。")]),a._v(" "),s("ol",[s("li",[s("code",[a._v("protected")]),a._v("只能由同一个包中的类访问。"),s("strong",[a._v("受保护部分对所有子类（尽管不在同一包下）及同一个包中的所有其他类都可见。")])]),a._v(" "),s("li",[s("code",[a._v("private")]),a._v("仅对本类可见。子类都不可以。")]),a._v(" "),s("li",[s("code",[a._v("public")]),a._v("对外部完全可见。")]),a._v(" "),s("li",[a._v("不加修饰符，对本包可见。")])]),a._v(" "),s("h3",{attrs:{id:"_2-8-object类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-object类"}},[a._v("#")]),a._v(" 2.8 Object类")]),a._v(" "),s("p",[a._v("Object类是Java中所有类的始祖，在Java中每个类都拓展了Object。")]),a._v(" "),s("p",[a._v("在Java中，只有"),s("strong",[a._v("基本类型")]),a._v("不是对象（数值，字符，布尔）。所有的数组类，"),s("strong",[a._v("不管是对象数组还是基本类型的数组都扩展了"),s("code",[a._v("Object")]),a._v("类。")])]),a._v(" "),s("p",[s("strong",[a._v("equals方法")])]),a._v(" "),s("p",[a._v("用于确定一个对象是否等于另外一个对象。确定两个对象引用是否相等。经常需要基于状态检测对象的相等性，如果两个对象有相同的状态，才认为这两个对象是相等的。否则没多大意义。所以下面代码重写了"),s("code",[a._v("Employee")]),a._v("的"),s("code",[a._v("equals")]),a._v("方法。如果"),s("code",[a._v("id")]),a._v("，"),s("code",[a._v("salary")]),a._v("，"),s("code",[a._v("name")]),a._v("都相等，那么两个对象就相等。")]),a._v(" "),s("p",[a._v("下面是标准的"),s("code",[a._v("equals")]),a._v("方法：注意函数签名中传入的参数是"),s("code",[a._v("Object")]),a._v("对象，因为是"),s("code",[a._v("Object")]),a._v("中的方法。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("equals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("o "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("||")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Employee")]),a._v(" employee "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Employee")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" employee"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("id "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("compare")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("employee"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("salary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" salary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Objects")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("equals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" employee"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[s("code",[a._v("equals")]),a._v("与~的定义必须相容：如果"),s("code",[a._v("x.equals(y)")]),a._v("返回"),s("code",[a._v("true")]),a._v("，那么"),s("code",[a._v("x.hashcode()")]),a._v("就必须与"),s("code",[a._v("y.hashcode()")]),a._v("返回相同的值。")]),a._v(" "),s("h3",{attrs:{id:"_2-9-对象包装器与自动装箱"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-对象包装器与自动装箱"}},[a._v("#")]),a._v(" 2.9 对象包装器与自动装箱")]),a._v(" "),s("p",[a._v("常见的包装器"),s("code",[a._v("Integer、Long、Float、Double、Short、Byte")]),a._v("，他们派生于公共的超类"),s("code",[a._v("Number")]),a._v("；还有"),s("code",[a._v("Character、Boolean")]),a._v("。")]),a._v(" "),s("p",[s("strong",[a._v("包装器类是不可变的，即一旦构造了包装器，就不允许更改包装器在其中的值。同时，包装器类还是final的，不能派生子类。")])]),a._v(" "),s("p",[a._v("由于每个值分别包装在对象中，所以"),s("code",[a._v("ArrayList<Integer>")]),a._v("的效率远远低于"),s("code",[a._v("int[]")]),a._v("数组。但是很容易向其中加入"),s("code",[a._v("int")]),a._v("类型的元素。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("将自动地变换为")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("这种变换成为"),s("strong",[a._v("自动装箱")]),a._v("。")]),a._v(" "),s("p",[a._v("相反，当一个"),s("code",[a._v("Integer")]),a._v("对象赋值给一个"),s("code",[a._v("int")]),a._v("值时，就自动拆箱。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("将自动地变换为")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("intValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("注意**装箱与拆箱是编译器要做的工作，而不是虚拟机。**编译器在生成类的字节码时会插入必要的方法调用，虚拟机只是执行这些字节码。")]),a._v(" "),s("p",[s("code",[a._v("Integer")]),a._v("类中的一些"),s("code",[a._v("API")]),a._v("对比：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 返回一个数值型整数")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("parseInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 返回一个Integer对象")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h2",{attrs:{id:"_3-多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-多态"}},[a._v("#")]),a._v(" 3. 多态")]),a._v(" "),s("h3",{attrs:{id:"_3-1-基本思想"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-基本思想"}},[a._v("#")]),a._v(" 3.1 基本思想")]),a._v(" "),s("p",[a._v("同类型的对象，执行同一个行为，会表现出不同的行为特征。")]),a._v(" "),s("p",[s("strong",[a._v("常见形式")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("父类类型 对象名称 = new 子类构造器;\n接口    对象名称 = new 实现类构造器;\n")])])]),s("p",[s("strong",[a._v("多态中成员访问特点")])]),a._v(" "),s("ul",[s("li",[s("p",[a._v("方法调用：编译看左边，运行看右边。")])]),a._v(" "),s("li",[s("p",[a._v("变量调用：编译看左边，运行也看左边。（"),s("strong",[a._v("多态侧重行为多态")]),a._v("）")])])]),a._v(" "),s("p",[s("strong",[a._v("多态前提")])]),a._v(" "),s("ul",[s("li",[a._v("有继承/实现关系；有父类引用指向子类对象；有方法重写。")])]),a._v(" "),s("h3",{attrs:{id:"_3-2-多态优缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-多态优缺点"}},[a._v("#")]),a._v(" 3.2 多态优缺点")]),a._v(" "),s("p",[s("strong",[a._v("优势")])]),a._v(" "),s("ul",[s("li",[a._v("在多态形式下，右边对象可以实现解耦合，便于扩展和维护。")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Animal")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Dog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 后续业务行为随对象而变，后续代码无需修改")]),a._v("\n")])])]),s("ul",[s("li",[a._v("定义方法的时候，使用父类型作为参数，该方法就可以接收这父类的一切子类对象，体现出多态的扩展性与便利。")])]),a._v(" "),s("p",[s("strong",[a._v("劣势")])]),a._v(" "),s("ul",[s("li",[a._v("多态下不能使用子类的独有功能")])]),a._v(" "),s("h3",{attrs:{id:"_3-3-多态下引用数据类型的类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-多态下引用数据类型的类型转换"}},[a._v("#")]),a._v(" 3.3 多态下引用数据类型的类型转换")]),a._v(" "),s("p",[a._v("自动类型转换（从子到父)")]),a._v(" "),s("ul",[s("li",[a._v("子类对象赋值给父类类型的变量指向。")])]),a._v(" "),s("p",[a._v("强制类型转换（从父到子)")]),a._v(" "),s("ul",[s("li",[a._v("此时必须进行强制类型转换：子类 对象变量 = (子类)父类类型的变量")]),a._v(" "),s("li",[a._v("作用：可以解决多态下的劣势，可以实现调用子类独有的功能。")]),a._v(" "),s("li",[a._v("注意： 如果转型后的类型和对象真实类型不是同一种类型，那么在转换的时候就会出现"),s("code",[a._v("ClassCastException")]),a._v("异常。")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Animal")]),a._v(" t "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Tortoise")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Dog")]),a._v(" d "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Dog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 出现异常 ClassCastException")]),a._v("\n")])])]),s("p",[a._v("Java建议强转转换前使用"),s("code",[a._v("instanceof")]),a._v("判断当前对象的真实类型，再进行强制转换")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("变量名 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("instanceof")]),a._v(" 真实类型\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 判断关键字左边的变量指向的对象的真实类型，是否是右边的类型或者是其子类类型，是则返回true，反之")]),a._v("\n")])])]),s("h2",{attrs:{id:"_4-内部类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-内部类"}},[a._v("#")]),a._v(" 4. 内部类")]),a._v(" "),s("p",[a._v("内部类就是定义在一个类里面的类，里面的类可以理解成（寄生），外部类可以理解成（宿主）。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Outer")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Inner")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ...")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("作用")]),a._v(" "),s("ul",[s("li",[a._v("当一个事物的内部，还有一个部分需要一个完整的结构进行描述，而这个内部的完整的结构又只为外部事物提供服务，那么整个内部的完整结构可以选择使用内部类来设计。")]),a._v(" "),s("li",[a._v("内部类通常可以方便访问外部类的成员，包括私有的成员。")]),a._v(" "),s("li",[a._v("内部类提供了更好的封装性，内部类本身就可以用private protectecd等修饰，封装性可以做更多控制。")])]),a._v(" "),s("h3",{attrs:{id:"_4-1-静态内部类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-静态内部类"}},[a._v("#")]),a._v(" 4.1 静态内部类")]),a._v(" "),s("ul",[s("li",[a._v("有static修饰，属于外部类本身。")]),a._v(" "),s("li",[a._v("它的特点和使用与普通类是完全一样的，类有的成分它都有，只是位置在别人里面而已。")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Outer")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Inner")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ...")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("静态内部类创建对象的格式：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("外部类名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("内部类名 对象名 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" 外部类名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("内部类构造器\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Outer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Inner")]),a._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Outer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Inner")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[s("strong",[a._v("注意")])]),a._v(" "),s("p",[a._v("静态内部类中"),s("strong",[a._v("可以")]),a._v("直接访问外部类的"),s("strong",[a._v("静态成员")]),a._v("\n但静态内部类中是"),s("strong",[a._v("不能")]),a._v("直接访问外部类的"),s("strong",[a._v("实例成员")])]),a._v(" "),s("h3",{attrs:{id:"_4-2-成员内部类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-成员内部类"}},[a._v("#")]),a._v(" 4.2 成员内部类")]),a._v(" "),s("ul",[s("li",[a._v("无static修饰，属于外部类的对象。")]),a._v(" "),s("li",[a._v("JDK16之前，成员内部类中不能定义静态成员，JDK 16开始也可以定义静态成员了。")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Outer")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Inner")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ...")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("成员内部类创建对象的格式：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("外部类名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("内部类名 对象名 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v("  外部类构造器"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" 内部类构造器"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Outer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Inner")]),a._v(" in "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Outer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Inner")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[s("strong",[a._v("注意")])]),a._v(" "),s("p",[a._v("成员内部类中可以直接访问外部类的静态成员，外部类的静态成员只有一份可以被共享访问。")]),a._v(" "),s("p",[a._v("成员内部类的实例方法中可以直接访问外部类的实例成员，因为必须先有外部类对象，才能有成员内部类对象，所以可以直接访问外部类对象的实例成员。")]),a._v(" "),s("p",[s("strong",[a._v("拓展")])]),a._v(" "),s("p",[a._v("在成员内部类中访问所在外部类对象 ，格式为"),s("code",[a._v("外部类名.this")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Outer")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Inner")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("fun")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 30")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 20")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Outer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 10")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Test")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Outer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Inner")]),a._v(" in "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Outer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Inner")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        in"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("fun")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h3",{attrs:{id:"_4-3-局部内部类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-局部内部类"}},[a._v("#")]),a._v(" 4.3 局部内部类")]),a._v(" "),s("ul",[s("li",[a._v("局部内部类放在方法、代码块、构造器等执行体中。")]),a._v(" "),s("li",[a._v("局部内部类的类文件名为： 外部类$内部类.class。")])]),a._v(" "),s("h3",{attrs:{id:"_4-4-匿名内部类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-匿名内部类"}},[a._v("#")]),a._v(" 4.4 匿名内部类！！！")]),a._v(" "),s("p",[s("strong",[a._v("本质")])]),a._v(" "),s("ul",[s("li",[a._v("本质上是一个没有名字的局部内部类，定义在方法中、代码块中、等。")])]),a._v(" "),s("p",[s("strong",[a._v("作用")])]),a._v(" "),s("ul",[s("li",[a._v("方便创建子类对象，最终目的为了简化代码编写。")])]),a._v(" "),s("p",[s("strong",[a._v("特点")])]),a._v(" "),s("ul",[s("li",[a._v("匿名内部类是一个没有名字的内部类。")]),a._v(" "),s("li",[a._v("匿名内部类写出来就会产生一个匿名内部类的对象。")]),a._v(" "),s("li",[a._v("匿名内部类的对象类型相当于是当前new的那个的类型的子类类型。")])]),a._v(" "),s("p",[s("strong",[a._v("也会产生class文件")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" 类"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("抽象类名"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("或者接口名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    重写方法"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("例：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("abstract")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Animal")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("abstract")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Test")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Animal")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Tiger running"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[s("strong",[a._v("匿名内部类可以作为方法的实际参数进行传输。")])]),a._v(" "),s("div",{staticClass:"language-Java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("interface")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Swimming")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("swim")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Test2")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("go")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Swimming")]),a._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("swim")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Swimming")]),a._v(" stu "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Swimming")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("swim")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"学生游泳"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("go")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("stu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Swimming")]),a._v(" tea "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Swimming")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("swim")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"老师游泳"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("go")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("tea"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 匿名内部类可以直接作为方法的形参")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("go")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Swimming")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("swim")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"运动员游泳"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[s("strong",[a._v("开发中不是我们主动去定义匿名内部类的，而是别人需要我们写或者我们可以写的时候才会使用。")])]),a._v(" "),s("p",[s("strong",[a._v("匿名内部类的代码可以实现代码进一步的简化")])])],1)}),[],!1,null,null,null);t.default=e.exports}}]);