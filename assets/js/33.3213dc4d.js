(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{528:function(t,s,a){t.exports=a.p+"assets/img/0162_001.fffa504a.png"},529:function(t,s,a){t.exports=a.p+"assets/img/0162_002.8051dd92.png"},530:function(t,s,a){t.exports=a.p+"assets/img/0162_003.fe35ee5c.png"},939:function(t,s,a){"use strict";a.r(s);var n=a(25),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"_162-寻找峰值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_162-寻找峰值"}},[t._v("#")]),t._v(" 162. 寻找峰值")]),t._v(" "),n("Valine"),t._v(" "),n("h2",{attrs:{id:"题目描述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[t._v("#")]),t._v(" 题目描述")]),t._v(" "),n("p",[t._v("题目传送门："),n("a",{attrs:{href:"https://leetcode-cn.com/problems/find-peak-element/",target:"_blank",rel:"noopener noreferrer"}},[t._v("162. 寻找峰值"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("峰值元素是指其值严格大于左右相邻值的元素。")]),t._v(" "),n("p",[t._v("给你一个整数数组 "),n("code",[t._v("nums")]),t._v("，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 "),n("strong",[t._v("任何一个峰值")]),t._v(" 所在位置即可。")]),t._v(" "),n("p",[t._v("你可以假设 "),n("code",[t._v("nums[-1] = nums[n] = -∞")]),t._v(" 。")]),t._v(" "),n("p",[t._v("你必须实现时间复杂度为 "),n("code",[t._v("O(log n)")]),t._v(" 的算法来解决此问题。")]),t._v(" "),n("p",[n("strong",[t._v("示例 1：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入：nums = [1,2,3,1]\n输出：2\n解释：3 是峰值元素，你的函数应该返回其索引 2。\n")])])]),n("p",[n("strong",[t._v("示例 2：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("输入：nums = [1,2,1,3,5,6,4]\n输出：1 或 5 \n解释：你的函数可以返回索引 1，其峰值元素为 2；\n     或者返回索引 5， 其峰值元素为 6。\n")])])]),n("p",[n("strong",[t._v("提示：")])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("1 <= nums.length <= 1000")])]),t._v(" "),n("li",[n("code",[t._v("-2^31 <= nums[i] <= 2^31 - 1")])]),t._v(" "),n("li",[t._v("对于所有有效的 "),n("code",[t._v("i")]),t._v(" 都有 "),n("code",[t._v("nums[i] != nums[i + 1]")])])]),t._v(" "),n("h2",{attrs:{id:"题解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#题解"}},[t._v("#")]),t._v(" 题解")]),t._v(" "),n("p",[t._v("首先要注意，我们之前做的二分查找都是给定一个有序的序列，在里面查找某个值，因此不要以为二分查找只能用于查找单调序列，本题就是一个很好的示例。")]),t._v(" "),n("p",[t._v("题目中假设  "),n("code",[t._v("nums[-1] = nums[n] = -∞")]),t._v("  ，因此数组无论是单调递增还是单调递减，又或者是成起伏状，数组中必定包含一个峰值。")]),t._v(" "),n("div",{attrs:{align:"center"}},[n("img",{staticClass:"zoom-custom-imgs",attrs:{src:a(528),width:"600px"}})]),t._v(" "),n("p",[t._v("因为数组中的峰值不止一个，我们找到任意一个即可。题目还告诉我们对于所有有效的"),n("code",[t._v("i")]),t._v("都有 "),n("code",[t._v("nums[i] != nums[i + 1]")]),t._v("，即数组中的任意两个相邻数都不相等。")]),t._v(" "),n("p",[t._v("每次找出区间的中点"),n("code",[t._v("mid")]),t._v("，比较"),n("code",[t._v("nums[mid]")]),t._v("与"),n("code",[t._v("nums[mid + 1]")]),t._v("的大小关系来推断哪个区间内一定存在峰值，然后取一定存在峰值的区间。这样不断缩小区间范围，区间所剩下的最后一个数就是答案。")]),t._v(" "),n("p",[n("strong",[t._v("过程如下：")])]),t._v(" "),n("ol",[n("li",[n("p",[t._v("二分的边界，"),n("code",[t._v("l = 0")]),t._v(", "),n("code",[t._v("r = nums.size() - 1")]),t._v("。")])]),t._v(" "),n("li",[n("p",[t._v("如果"),n("code",[t._v("nums[mid] > nums[mid + 1]")]),t._v("，那么在"),n("code",[t._v("[l, mid]")]),t._v("这个区间内一定存在一个峰值。因为"),n("code",[t._v("[l,mid]")]),t._v("这一段如果是单调递减的话，那么"),n("code",[t._v("nums[l]")]),t._v("就是峰值，否则第一个出现上升的点就是峰值。")]),t._v(" "),n("div",{attrs:{align:"center"}},[n("img",{staticClass:"zoom-custom-imgs",attrs:{src:a(529),width:"600px"}})])]),t._v(" "),n("li",[n("p",[t._v("如果"),n("code",[t._v("nums[mid] < nums[mid + 1]")]),t._v("，那么在"),n("code",[t._v("[mid+1, r]")]),t._v("这个区间内一定存在一个峰值。因为"),n("code",[t._v("[mid+1,r]")]),t._v("这一段如果是单调递增的话，那么"),n("code",[t._v("nums[r]")]),t._v("就是峰值，否则第一个出现下降的点就是峰值。")]),t._v(" "),n("div",{attrs:{align:"center"}},[n("img",{staticClass:"zoom-custom-imgs",attrs:{src:a(530),width:"600px"}})])])]),t._v(" "),n("p",[t._v("那  "),n("strong",[t._v("只要数组中存在一个元素比相邻元素大，那么沿着它一定可以找到一个峰值")]),t._v(" ，基于此，我们就可以使用二分查找找到峰值。")]),t._v(" "),n("p",[n("code",[t._v("nums[mid] > nums[mid + 1]")]),t._v(" 那么说明左侧存在峰值，更新有边界 "),n("code",[t._v("r")]),t._v(" ，否则更新左边界 "),n("code",[t._v("l")]),t._v(" 。")]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("findPeakElement")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vector"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" l "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" r"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" mid "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" l"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mid"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mid "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" r "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" l "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  mid "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" l"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("ul",[n("li",[t._v("时间复杂度： "),n("code",[t._v("O(logn)")])])]),t._v(" "),n("p",[t._v("思路参考博客链接： "),n("a",{attrs:{href:"https://leetcode-cn.com/problems/find-peak-element/solution/er-fen-cha-zhao-zui-jian-jie-yi-dong-de-cvn1f/",target:"_blank",rel:"noopener noreferrer"}},[t._v("leetcode讨论区题解"),n("OutboundLink")],1)])],1)}),[],!1,null,null,null);s.default=e.exports}}]);